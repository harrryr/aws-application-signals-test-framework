## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: Apache-2.0

name: AWS Resource Cleaner

on:
#  schedule:
#    - cron: '0 18 * * *' # scheduled to run at 18:00 UTC every day
#  workflow_dispatch: # be able to run on demand
  push:

jobs:
  cleanup-ec2-instances:
    strategy:
      fail-fast: false
      matrix:
        aws-region: ['af-south-1','ap-east-1','ap-northeast-1','ap-northeast-2','ap-northeast-3','ap-south-1','ap-south-2','ap-southeast-1',
                     'ap-southeast-2','ap-southeast-3','ap-southeast-4','ca-central-1','eu-central-1','eu-central-2','eu-north-1',
                     'eu-south-1','eu-south-2','eu-west-1','eu-west-2','eu-west-3','il-central-1','me-central-1','me-south-1', 'sa-east-1',
                     'us-east-1','us-east-2', 'us-west-1', 'us-west-2']
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Configure AWS credentials for IAD account access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.E2E_IAD_TEST_ACCOUNT_ARN }}
          aws-region: us-east-1

      - name: Retrieve account id for the region
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids:
            ACCOUNT_ID, region-account/${{ matrix.aws-region }}

      - name: Configure AWS credentials for the regional account access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ secrets.RESOURCE_CLEANER_ROLE_NAME }}
          aws-region: ${{ matrix.aws-region }}

      - name: Cleanup EC2 instances and ASGs
        working-directory: .github/workflows/util/clean/ec2_instance_cleanup
        env:
          AWS_DEFAULT_REGION: ${{ matrix.aws-region }}
          S3_REPORTS_BUCKET: ${{ secrets.S3_CLEAUP_REPORTS_BUCKET }}-prod-${{ matrix.aws-region }}
        run: |
          python -m pip install -r requirements.txt
          python cleaner.py

  cleanup-k8s-on-ec2:
    runs-on: ubuntu-latest
    if: ${{ github.event.schedule && startsWith(format('{::yyyy-MM-dd}', now()), format('{::yyyy-MM}-01', now())) }}
    strategy:
      matrix:
        instance: [
          { repo_name: 'amazon-cloudwatch-agent-operator', ec2_name: 'cw-agent-operator-release', language: 'java' },
          { repo_name: 'amazon-cloudwatch-agent-operator', ec2_name: 'cw-agent-operator-release', language: 'python' },
          { repo_name: 'amazon-cloudwatch-agent', ec2_name: 'cw-agent-release', language: 'java' },
          { repo_name: 'amazon-cloudwatch-agent', ec2_name: 'cw-agent-release', language: 'python' },
          { repo_name: 'aws-otel-python-instrumentation', ec2_name: 'adot-python-release', language: 'python' },
          { repo_name: 'aws-otel-java-instrumentation', ec2_name: 'adot-java-release', language: 'java' },
          { repo_name: 'aws-application-signals-test-framework', ec2_name: 'python-canary', language: 'python' },
          { repo_name: 'aws-application-signals-test-framework', ec2_name: 'java-canary', language: 'java' },
          { repo_name: 'aws-application-signals-test-framework', ec2_name: 'e2e-playground', language: 'all' } ]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.E2E_TEST_ACCOUNT_ID }}:role/${{ env.E2E_TEST_ROLE_NAME }}
          aws-region: us-east-1

      - name: Delete Key Pair and EC2 Instance
        run: |
          STORAGE_SECRET_KEYS=(
            "e2e-test/${{ env.REPO }}/${{ env.LANGUAGE }}-k8s-master-node-endpoint-temporary-storage"
          )
          endpoint_secret=$(aws secretsmanager get-secret-value --secret-id "${CURRENT_SECRET_KEYS[0]}" --query SecretString --output text)
          instance_name=$(aws ec2 describe-instances \
            --filters "Name=ip-address,Values=$public_ip" \
            --query "Reservations[*].Instances[*].{Name:Tags[?Key=='Name']|[0].Value}" \
            --output text)
          prev_testing_id=$(echo $instance_name | awk -F'-' '{print $(NF-1)"-"$NF}')
          
          aws ec2 delete-key-pair --key-name "k8s-on-ec2-${{ matrix.instance.ec2_name }}-${{ matrix.instance.language }}-key-pair-$prev_testing_id"
          
          main_instance_name=k8s-on-ec2-${{ matrix.instance.ec2_name }}-${{ matrix.instance.language }}-master-$prev_testing_id
          worker_instance_name=k8s-on-ec2-${{ matrix.instance.ec2_name }}-${{ matrix.instance.language }}-worker-$prev_testing_id
          main_instance_id=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=$main_instance_name" \
          --query "Reservations[*].Instances[*].InstanceId" \
          --output text)
          
          worker_instance_id=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=$worker_instance_name" \
          --query "Reservations[*].Instances[*].InstanceId" \
          --output text)
          
          aws ec2 terminate-instances --instance-ids $main_instance_id
          aws ec2 terminate-instances --instance-ids $worker_instance_id

  publish-metric:
    needs: [ cleanup-ec2-instances, cleanup-k8s-on-ec2 ]
    if: always()
    uses: ./.github/workflows/enablement-test-publish-result.yml
    secrets: inherit
    with:
      aws-region: 'us-east-1'
      caller-workflow-name: 'enablement-test-resource-cleanup'
      validation-result: ${{ (needs.cleanup-ec2-instances.result == 'success' && needs.cleanup-k8s-on-ec2.result != 'failure') && 'success' || 'failure' }}