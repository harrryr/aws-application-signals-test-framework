# The EC2 AMI for K8s needs to be updated to prevent it from becoming outdated. This workflow will run in the beginning of every month to replace the existing
# instances with new ones
name: Update K8s EC2 Instance

on:
  schedule:
    - cron: '0 0 1 * *' # run the workflow beginning of every month
  workflow_dispatch: # be able to run the workflow on demand

permissions:
  id-token: write
  contents: read

env:
  E2E_TEST_AWS_REGION: us-east-1
  E2E_TEST_ACCOUNT_ID: ${{ secrets.APPLICATION_SIGNALS_E2E_TEST_ACCOUNT_ID }}
  E2E_TEST_ROLE_NAME: ${{ secrets.APPLICATION_SIGNALS_E2E_TEST_ROLE_NAME }}

jobs:
  create-k8s-on-ec2:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: [ { repo: 'amazon-cloudwatch-agent-operator', ec2_name: 'cw-agent-operator-release', language: 'java'},
                    { repo: 'amazon-cloudwatch-agent-operator', ec2_name: 'cw-agent-operator-release', language: 'python'},
                    { repo: 'amazon-cloudwatch-agent', ec2_name: 'cw-agent-release', language: 'java'},
                    { repo: 'amazon-cloudwatch-agent', ec2_name: 'cw-agent-release', language: 'python'},
                    { repo: 'aws-otel-python-instrumentation', ec2_name: 'adot-python-release', language: 'python'},
                    { repo: 'aws-otel-java-instrumentation', ec2_name: 'adot-java-release', language: 'java'},
                    { repo: 'aws-application-signals-test-framework', ec2_name: 'python-canary', language: 'python'},
                    { repo: 'aws-application-signals-test-framework', ec2_name: 'java-canary', language: 'java'},
                    { repo: 'aws-application-signals-test-framework', ec2_name: 'e2e-playground', language: 'all'} ]
    steps:
      - name: Generate Testing ID
        run: |
          echo TESTING_ID="${{ github.run_id }}-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.E2E_TEST_ACCOUNT_ID }}:role/${{ env.E2E_TEST_ROLE_NAME }}
          aws-region: us-east-1

      - name: Create New K8s on EC2
        working-directory: .github/workflows/util
        run: |
          ./setup-k8s.sh ${{ env.TESTING_ID }} ${{ matrix.instance.ec2_name }} ${{ env.E2E_TEST_AWS_REGION }}

      - name: Check if Secret Key Already Exist and If Not Create New Ones
        run: |
          SECRET_NAMES=(
            "e2e-test/${{ matrix.instance.repo }}/${{ matrix.instance.language }}-k8s-master-node-endpoint"
            "e2e-test/${{ matrix.instance.repo }}/${{ matrix.instance.language }}-k8s-ssh-key"
          )
          
          for SECRET_NAME in "${SECRET_NAMES[@]}"; do
            echo "Checking secret: $SECRET_NAME"

            secret_exists=$(aws secretsmanager describe-secret --secret-id $SECRET_NAME --query 'ARN' --output text 2>/dev/null)
          
            if [ -z "$secret_exists" ]; then
              echo "Secret does not exist. Creating new secret"
              aws secretsmanager create-secret --name $SECRET_NAME --secret-string ""
            fi
          done
          

      - name: Save Private Key and Master Public Endpoint to Secret Manager
        working-directory: .github/workflows/util
        run: |
          SECRET_NAMES=(
            "e2e-test/${{ matrix.instance.repo }}/${{ matrix.instance.language }}-k8s-master-node-endpoint"
            "e2e-test/${{ matrix.instance.repo }}/${{ matrix.instance.language }}-k8s-ssh-key"
          )
          
          private_key_file=k8s-on-ec2-${{ matrix.instance.ec2_name }}-key-pair-${{ env.TESTING_ID }}.pem
          
          master_public_ip=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=$MASTER_INSTANCE_NAME" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
          
          aws secretsmanager update-secret --secret-id "${SECRET_NAMES[0]}" --secret-string file://$private_key_file
          aws secretsmanager update-secret --secret-id "${SECRET_NAMES[1]}" --secret-string file://$master_public_ip

  run-e2e-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: [ { repo: 'amazon-cloudwatch-agent-operator', ec2_name: 'cw-agent-operator-release', language: 'java' },
                    { repo: 'amazon-cloudwatch-agent-operator', ec2_name: 'cw-agent-operator-release', language: 'python' },
                    { repo: 'amazon-cloudwatch-agent', ec2_name: 'cw-agent-release', language: 'java' },
                    { repo: 'amazon-cloudwatch-agent', ec2_name: 'cw-agent-release', language: 'python' },
                    { repo: 'aws-otel-python-instrumentation', ec2_name: 'adot-python-release', language: 'python' },
                    { repo: 'aws-otel-java-instrumentation', ec2_name: 'adot-java-release', language: 'java' },
                    { repo: 'aws-application-signals-test-framework', ec2_name: 'python-canary', language: 'python' },
                    { repo: 'aws-application-signals-test-framework', ec2_name: 'java-canary', language: 'java' },
                    { repo: 'aws-application-signals-test-framework', ec2_name: 'e2e-playground', language: 'all' } ]
    steps:
      - name: Run Java K8s Test
        uses: ./.github/workflows/reusable-workflow.yml
        with:
          # Pass inputs if your reusable workflow requires any
          some-input: "value"

